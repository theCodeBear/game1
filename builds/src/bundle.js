/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided:  */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gameLib__ = __webpack_require__(/*! ../../gameLib */ 1);\n\n\n__WEBPACK_IMPORTED_MODULE_0__gameLib__[\"a\" /* default */].init();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9pbmRleC5qcz85NTUyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnYW1lIGZyb20gJy4uLy4uL2dhbWVMaWInO1xuXG5nYW1lLmluaXQoKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/*!***************************!*\
  !*** ../gameLib/index.js ***!
  \***************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/*\n * library needs to expose public methods init, update (more to come) methods\n * library needs to expose public setters loadMap, setTileSize, createPlayer\n * library needs to expose public getters getMap, getPlayer, getCanvas??, getContext??\n * keys pressed, drawMap, updatePlayerToMap should be run on update\n*/\n\nlet game = {\n  // DATA\n  tileSize: null,\n  map: null,\n  player: null,\n  canvas: null,\n  ctx: null,\n  // FUNCTIONS\n  init: null,\n//  verifyMapDimension: null,\n//  customError: null,\n//  updatePlayerToMap: null,\n//  update: null,\n  setTileSize: null,\n  createPlayer: null,\n  setMap: null,\n//  keydown: null,\n//  drawMap: null\n};\n\ngame.createPlayer = (avatar, color, x, y) => {\n  game.player = {\n    x,\n    y,\n    avatar,\n    color,\n    lastMove: [],\n    move: (x,y) => {\n      // if (map[this.x+x][this.y+y] != \"#\") {\n      game.player.x += x;\n      game.player.y += y;\n      update();\n      // }\n      game.player.lastMove = [x,y];\n    }\n  };\n};\n\ngame.setMap = (mapArray) => {\n  if (game.map) return;\n  game.map = mapArray;\n};\n\ngame.setTileSize = (tileSize) => {\n  if (game.tileSize) return;\n  game.tileSize = tileSize;\n};\n\n        let tileSize = 20;\n\n        let map = [\n                \"...............\",\n                \"...............\",\n                \"...............\",\n                \"...............\",\n                \"...............\",\n                \"...............\",\n                \"...............\",\n                \"#..............\",\n                \"#...MZW........\",\n                \"#..............\",\n                \"#..............\",\n                \"#..............\"\n                ];\n\n\n    // Use this method of creating player objects because there will only be a single player\n        /*var player = {\n            x : 8,\n            y : 8,\n            avatar : \"@\",\n            color : \"orange\",\n            lastMove : [],\n            move : function(x,y) {\n                // if (map[this.x+x][this.y+y] != \"#\") {\n                    this.x += x;\n                    this.y += y;\n                    update();\n                // }\n                this.lastMove = [x,y];\n            }\n        };*/\n\n\n        window.addEventListener(\"keydown\", (event) => {\n            switch(event.keyCode) {\n                case 37:\n                    game.player.move(-1,0);\n                    update();\n                    break;\n                case 38:\n                    game.player.move(0,-1);\n                    update();\n                    break;\n                case 39:\n                    game.player.move(1,0);\n                    update();\n                    break;\n                case 40:\n                    game.player.move(0,1);\n                    update();\n                    break;\n            }\n        });\n\n        game.init = () => {\n            game.canvas = document.getElementById(\"myCanvas\");\n            game.canvas.width = window.innerWidth;\n            game.canvas.height = window.innerHeight;\n            game.ctx = game.canvas.getContext(\"2d\");\n\n            game.ctx.font=\"17px Andale Mono\";\n            game.ctx.textAlign = \"center\";\n            game.ctx.textBaseline = \"top\";       // top means that the top of the character space\n                                            // draws at the y-coordinate you give it.\n            game.createPlayer('@', 'orange', 8, 8);\n            game.setTileSize(tileSize);\n            game.setMap(map);\n            update();\n\n        };\n\n    // This defines a new method for array objects called drawMap. So this is the draw method\n    // for whatever map is active. I could make a roguelike game dev library and include this.\n    // Can optinonally include a two element color array representing the color of the map and\n    // color of the grid. If I were to put this in a game library I would always need to supply\n    // as a parameter the height and width of each block in the grid/map. Maybe would also need\n    // optionally parameters for the x,y coords to begin drawing the map at and the height and\n    // width of the map in blocks. And borderColor, if given, will give the whole map a border\n    // of that color, if it is not given then there will be no border. Also need to make it so\n    // it is only going through the logic of drawing what will be on screen, and not just the\n    // whole map.\n    // Also right now it always starts drawing at grid block (0,0), need to add two parameters\n    // to represent drawing starting at a different block in the map. Could be just two params\n    // at the end of the param list, but have to figure out how I keep track of it outside the\n    // function.\n    // The function expects a square map (or at least the first row must be as long as the\n    // others).\n        Array.prototype.drawMap = function(grid, colors, mapWidth, mapHeight, mapX, mapY, borderColor) {\n\n        // Clear the screen for the next frame\n            game.ctx.clearRect(mapX,mapY,mapWidth*tileSize,mapHeight*tileSize);\n\n        // Set default values of zero for mapX and mapY if those arguments aren't given.\n            if (typeof(mapX) === 'undefined') mapX = 0;\n            if (typeof(mapY) === 'undefined') mapY = 0;\n\n        // Handle mapHeight parameter if larger than entire map or <= 0\n            mapHeight = verifyMapDimension(mapHeight, this.length);\n\n        // Handle mapWidth parameter if larger than entire map of <= 0\n            mapWidth = verifyMapDimension(mapWidth, this[0].length);\n\n        // Draw map to canvas\n            for (let row=0; row < (mapHeight = mapHeight || this.length); row++) {\n                for (let col=0; col < (mapWidth = mapWidth || this[row].length); col++) {\n                // output ASCII map characters\n                    if (colors)\n                        colors[0] ? game.ctx.fillStyle = colors[0] : game.ctx.fillStyle = \"white\";\n                    else\n                        game.ctx.fillStyle = \"white\";\n                    // if (this[row][col].color)    // will this work?? map objects having unique colors.\n                    //     game.ctx.fillStyle = this[row][col].color;\n                    game.ctx.fillText(this[row][col], col*tileSize+(tileSize/2)+mapX, row*tileSize+mapY);\n                // output grid:\n                    if (grid==true) {\n                        if (colors)\n                            colors[1] ? game.ctx.strokeStyle = colors[1] : game.ctx.strokeStyle = \"white\";\n                        else\n                            game.ctx.strokeStyle = \"white\";\n                        game.ctx.strokeRect(col*tileSize+mapX,row*tileSize+mapY,tileSize,tileSize);\n                    }\n                // Handle drawing (or not drawing) of map border.\n                    if (borderColor) {\n                        game.ctx.strokeStyle = borderColor;\n                        game.ctx.strokeRect(mapX, mapY, mapWidth*tileSize, mapHeight*tileSize);\n                    }\n                }\n            }\n            updatePlayerToMap(mapX, mapY);\n        }\n\n\n    // Will also be in my roguelike JS game library for moving the map on screen.\n        Array.prototype.moveMap = function() {\n            ;\n        }\n\n\n\n    // Handles map width and map height display dimensions if they are bad inputs - either too\n    // large (larger than map) or too small (<= 0). Fixes the dimensions or throws an error.\n    // First parameter is the dimension of the map being displayed, second parameter is the map's\n    // total size in that dimension.\n        function verifyMapDimension(displayDimen, totalDimen) {\n            try {\n                // if mapHeight or mapWidth is given as 0 or negative, throw an error.\n                if (displayDimen <= 0)\n                    throw new customError(\"Zero or negative number sent to drawMap() for viewable map dimension parameter\");\n                // if display dimension is larger than map set it equal to that of entire map\n                else if (displayDimen > totalDimen)\n                    displayDimen = totalDimen;\n            } catch(err) { console.log(err); }          // print possible error to console\n            finally { return displayDimen; }\n        }\n\n\n\n\n    // Creating a function to call to display custom errors. Just do: throw new customError()\n    // with the error message as the argument. Then send the error to the console.log() in the\n    // catch block. This can also be part of my roguelike game dev library since I give the\n    // errors a name appropriate to the library.\n        function customError(message) {\n            this.stack = new Error().stack;\n            this.name = \"Todd Roguelike Library Error\";\n            this.message = (message || \"\");\n        }\n        customError.prototype = new Error();//Error.prototype;\n\n    // Another way of doing a custom error:\n        // function customError() {\n        //     let err = Error.apply(this,arguments);\n        //     err.name = this.name = \"Todd Library Error\";\n        //     this.stack = err.stack;\n        //     // this.message = err.message;\n        //     return this;\n        // }\n\n        // function updatePlayerToMap() {\n\n        // }\n\n    // Once the player has moved this function clears from the display what is normally\n    // occupying that space on the map, and outputs the player's character instead.\n        function updatePlayerToMap(mapX, mapY) {//, mapWidth, mapHeight) {\n            console.log(game.player.x);\n            if (game.map[game.player.x][game.player.y] != \"#\") {\n                // clear display space where player is moving to.\n                game.ctx.clearRect(game.player.x*tileSize+mapX, game.player.y*tileSize+mapY, tileSize, tileSize);\n                // output the player to the screen in the correct spot\n                game.ctx.fillStyle = game.player.color;\n                game.ctx.fillText(game.player.avatar, game.player.x*tileSize+(tileSize/2)+mapX, game.player.y*tileSize+mapY);\n            } else {\n                game.player.x += -game.player.lastMove[0];\n                game.player.y += -game.player.lastMove[1];\n            }\n        }\n\n    // Game update function (the game loop)\n        function update() {\n\n            game.map.drawMap(false, [\"green\",\"blue\"], 10, 33, 100, 50);//, \"rgb(0,200,0)\");\n        }\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (game);\n\n\n\n\n\n\n/*\nvar game = {\n  // DATA\n  gridSize: null,\n  map: null,\n  player: null,\n  canvas: null,\n  ctx: null,\n  // FUNCTIONS\n  init: null,\n  verifyMapDimension: null,\n  customError: null,\n  updatePlayerToMap: null,\n  update: null,\n  setGrideSize: null,\n  createPlayer: null,\n  setMap: null,\n  keydown: null,\n  drawMap: null\n};\n\nvar gridSize = 20;\n\nvar map = [\n  \"...............\",\n  \"...............\",\n  \"...............\",\n  \"...............\",\n  \"...............\",\n  \"...............\",\n  \"...............\",\n  \"#..............\",\n  \"#...MZW........\",\n  \"#..............\",\n  \"#..............\",\n  \"#..............\"\n];\n\n// Use this method of creating player objects because there will only be a single player\n//var player = {\n//  x : 8,\n//  y : 8,\n//  avatar : \"@\",\n//  color : \"orange\",\n//  lastMove : [],\n//  move : function(x,y) {\n//    // if (map[this.x+x][this.y+y] != \"#\") {\n//      this.x += x;\n//      this.y += y;\n//      game.update();\n//    // }\n//    this.lastMove = [x,y];\n//  }\n//};\n\ngame.init = function() {\n  game.canvas = document.getElementById(\"myCanvas\");\n  game.ctx = game.canvas.getContext(\"2d\");\n\n  game.ctx.font=\"17px Andale Mono\";\n  game.ctx.textAlign = \"center\";\n  game.ctx.textBaseline = \"top\";       // top means that the top of the character space\n                                    // draws at the y-coordinate you give it.\n  game.createPlayer('@', 'orange', 8, 8);\n  game.setMap(map);\n\n  game.update();\n};\n\n\ngame.createPlayer = function(avatar, color, startingX, startingY) {\n  game.player = {\n    x: startingX,\n    y: startingY,\n    avatar: avatar,\n    color: color,\n    lastMove: [],\n    move: function(x,y) {\n      // if (map[this.x+x][this.y+y] != \"#\") {\n      console.log('this in move', this);\n      this.x += x;\n      this.y += y;\n      game.update();\n      // }\n      this.lastMove = [x,y];\n    }\n  };\n};\n\ngame.setGridSize = function(size) {\n  if (game.gridSize) return;\n  game.gridSize = size;\n};\n\ngame.setMap = function(mapArray) {\n  game.map = mapArray;\n};\n\n\n//window.addEventListener(\"keydown\", function(event) {\ngame.keydown = function(event) {\n  console.log('move', event.keyCode);\n  switch(event.keyCode) {\n    case 37:\n      game.player.move(-1,0);\n      game.update();\n      break;\n    case 38:\n      game.player.move(0,-1);\n      game.update();\n      break;\n    case 39:\n      game.player.move(1,0);\n      game.update();\n      break;\n    case 40:\n      game.player.move(0,1);\n      game.update();\n      break;\n  }\n};\n\nwindow.addEventListener('keydown', game.keydown);\n\n\n// This defines a new method for array objects called drawMap. So this is the draw method\n// for whatever map is active. I could make a roguelike game dev library and include this.\n// Can optinonally include a two element color array representing the color of the map and\n// color of the grid. If I were to put this in a game library I would always need to supply\n// as a parameter the height and width of each block in the grid/map. Maybe would also need\n// optionally parameters for the x,y coords to begin drawing the map at and the height and\n// width of the map in blocks. And borderColor, if given, will give the whole map a border\n// of that color, if it is not given then there will be no border. Also need to make it so\n// it is only going through the logic of drawing what will be on screen, and not just the\n// whole map.\n// Also right now it always starts drawing at grid block (0,0), need to add two parameters\n// to represent drawing starting at a different block in the map. Could be just two params\n// at the end of the param list, but have to figure out how I keep track of it outside the\n// function.\n// The function expects a square map (or at least the first row must be as long as the\n// others).\ngame.drawMap = function(grid, colors, mapWidth, mapHeight, mapX, mapY, borderColor) {\n\n// Clear the screen for the next frame\n  game.ctx.clearRect(mapX,mapY,mapWidth*game.gridSize,mapHeight*game.gridSize);\n\n// Set default values of zero for mapX and mapY if those arguments aren't given.\n  if (typeof(mapX) === 'undefined') mapX = 0;\n  if (typeof(mapY) === 'undefined') mapY = 0;\n\n// Handle mapHeight parameter if larger than entire map or <= 0\n  mapHeight = game.verifyMapDimension(mapHeight, this.length);\n\n// Handle mapWidth parameter if larger than entire map of <= 0\n  mapWidth = game.verifyMapDimension(mapWidth, this[0].length);\n\n// Draw map to canvas\n  for (var row=0; row < (mapHeight = mapHeight || this.length); row++) {\n    for (var col=0; col < (mapWidth = mapWidth || this[row].length); col++) {\n    // output ASCII map characters\n      if (colors)\n        colors[0] ? game.ctx.fillStyle = colors[0] : game.ctx.fillStyle = \"white\";\n      else\n        game.ctx.fillStyle = \"white\";\n      // if (this[row][col].color)    // will this work?? map objects having unique colors.\n      //     game.ctx.fillStyle = this[row][col].color;\n      game.ctx.fillText(this[row][col], col*game.gridSize+(game.gridSize/2)+mapX, row*game.gridSize+mapY);\n    // output grid:\n      if (grid==true) {\n        if (colors)\n          colors[1] ? game.ctx.strokeStyle = colors[1] : game.ctx.strokeStyle = \"white\";\n        else\n          game.ctx.strokeStyle = \"white\";\n        game.ctx.strokeRect(col*game.gridSize+mapX,row*game.gridSize+mapY,game.gridSize,game.gridSize);\n      }\n    // Handle drawing (or not drawing) of map border.\n      if (borderColor) {\n        game.ctx.strokeStyle = borderColor;\n        game.ctx.strokeRect(mapX, mapY, mapWidth*game.gridSize, mapHeight*game.gridSize);\n      }\n    }\n  }\n  game.updatePlayerToMap(mapX, mapY);\n};\n\nArray.prototype.drawMap = game.drawMap;\n\n\n// Will also be in my roguelike JS game library for moving the map on screen.\ngame.moveMap = function() {\n  ;\n};\n\nArray.prototype.moveMap = game.moveMap;\n\n\n\n// Handles map width and map height display dimensions if they are bad inputs - either too\n// large (larger than map) or too small (<= 0). Fixes the dimensions or throws an error.\n// First parameter is the dimension of the map being displayed, second parameter is the map's\n// total size in that dimension.\ngame.verifyMapDimension = function(displayDimen, totalDimen) {\n  try {\n    // if mapHeight or mapWidth is given as 0 or negative, throw an error.\n    if (displayDimen <= 0)\n      throw new customError(\"Zero or negative number sent to drawMap() for viewable map dimension parameter\");\n    // if display dimension is larger than map set it equal to that of entire map\n    else if (displayDimen > totalDimen)\n      displayDimen = totalDimen;\n  } catch(err) { console.log(err); }          // print possible error to console\n  finally { return displayDimen; }\n};\n\n\n\n\n// Creating a function to call to display custom errors. Just do: throw new customError()\n// with the error message as the argument. Then send the error to the console.log() in the\n// catch block. This can also be part of my roguelike game dev library since I give the\n// errors a name appropriate to the library.\ngame.customError = function(message) {\n  this.stack = new Error().stack;\n  this.name = \"Todd Roguelike Library Error\";\n  this.message = (message || \"\");\n};\ngame.customError.prototype = new Error();//Error.prototype;\n\n// Another way of doing a custom error:\n    // function customError() {\n    //     var err = Error.apply(this,arguments);\n    //     err.name = this.name = \"Todd Library Error\";\n    //     this.stack = err.stack;\n    //     // this.message = err.message;\n    //     return this;\n    // }\n\n    // function updatePlayerToMap() {\n\n    // }\n\n// Once the player has moved this function clears from the display what is normally\n// occupying that space on the map, and outputs the player's character instead.\ngame.updatePlayerToMap = function(mapX, mapY) {//, mapWidth, mapHeight) {\n  console.log('game', game);\n  console.log(game.player.x);\n  if (game.map[game.player.x][game.player.y] != \"#\") {\n    // clear display space where player is moving to.\n    game.ctx.clearRect(game.player.x*game.gridSize+mapX, game.player.y*game.gridSize+mapY, game.gridSize, game.gridSize);\n    // output the player to the screen in the correct spot\n    game.ctx.fillStyle = game.player.color;\n    game.ctx.fillText(game.player.avatar, game.player.x*game.gridSize+(game.gridSize/2)+mapX, game.player.y*game.gridSize+mapY);\n  } else {\n    game.player.x += -game.player.lastMove[0];\n    game.player.y += -game.player.lastMove[1];\n  }\n};\n\n// Game update function (the game loop)\ngame.update = function() {\n\n  game.map.drawMap(false, [\"green\",\"blue\"], 10, 33, 100, 50);//, \"rgb(0,200,0)\");\n}\n*/\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ })
/******/ ]);